user nginx;
worker_processes auto;

error_log /var/log/nginx/error.log notice;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
}

http {
    server_tokens off;

    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;

    sendfile on;
    keepalive_timeout 65;

    client_max_body_size 64M;

    # Map the base path that is defined by the reverse proxy (service.zir-online.com) to a variable.
    # Perhaps when upgraded to Symfony 5.4 remove this logic and have the reverse proxy set the header
    # X-Forwarded-Prefix (and other required X-Forwarded-* headers) instead.
    map $request_uri $base_path {
        "~^(/\D\D/store[^/?]*)" $1;
    }

    server {
        listen 80;
        listen [::]:80;
        listen 8084;
        listen [::]:8084;

        error_log /var/log/nginx/default.error.log;
        access_log /var/log/nginx/default.access.log main;

        root /var/www/html/web;

        # Ensure URL ends on a slash when accessed through service.zir-online.com. Symfony otherwise does not detect the
        # base URL properly when generating URLs.
        location ~ ^/\D\D/store[^/?]*$ {
            return 301 $uri/;
        }

        location / {
            rewrite ^/(?:\D\D/store[^/?]*)/(.*) /$1 break;
            rewrite ^/(?:\D\D/store[^/?]*) / break;

            # try to serve file directly, fallback to index.php
            try_files $uri /index.php$is_args$args;
        }

        location ~ ^/index\.php(/|$) {
            fastcgi_pass store-php-fpm:9000;
            fastcgi_split_path_info ^(.+\.php)(/.*)$;
            include fastcgi_params;

            # Pass along the base URL that we have mapped above. This ensures Symfony detects the proper base URL.
            fastcgi_param SCRIPT_NAME $base_path$fastcgi_script_name;

            # When you are using symlinks to link the document root to the
            # current version of your application, you should pass the real
            # application path instead of the path to the symlink to PHP
            # FPM.
            # Otherwise, PHP's OPcache may not properly detect changes to
            # your PHP files (see https://github.com/zendtech/ZendOptimizerPlus/issues/126
            # for more information).
            # Caveat: When PHP-FPM is hosted on a different machine from nginx
            #         $realpath_root may not resolve as you expect! In this case try using
            #         $document_root instead.
            fastcgi_param SCRIPT_FILENAME $realpath_root$fastcgi_script_name;
            fastcgi_param DOCUMENT_ROOT $realpath_root;
            # Prevents URIs that include the front controller. This will 404:
            # http://domain.tld/index.php/some-path
            # Remove the internal directive to allow URIs like this
            internal;
        }

        # return 404 for all other php files not matching the front controller
        # this prevents access to other php files you don't want to be accessible.
        location ~ \.php$ {
            return 404;
        }
    }
}
